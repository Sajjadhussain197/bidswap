datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  email             String       @unique
  password          String
  emailVerified     Boolean      @default(false)
  name              String?
  role              UserRole
  verificationToken String?
  profile           UserProfile?
  address           Address?
  posts             Post[]
  products          Product[]    @relation("UserProducts")
  coupons           Coupon[]
  orders            Order[]
  sales             Sale[]
  bids              Bid[]
  barters           Barter[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  bidders           Bidder[]
  resetToken        String? // Add this line
  resetTokenExpiry  DateTime? // 
  userRefunds       Refund[]     @relation("UserRefunds")
  vendorRefunds     Refund[]     @relation("VendorRefunds")
}

model UserProfile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  dateOfBirth DateTime?
  address     String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  slug      String    @unique
  title     String
  body      String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Address {
  street String
  city   String
  state  String
  zip    String
}

model Coupon {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String
  date      DateTime
  vendorId  String   @db.ObjectId
  slug      String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendor    User     @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String
  slug        String
  products    Product[] @relation("CategoryProducts")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  link      String
  image     String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Market {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  image       String
  description String
  categories  String
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Attribute {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Seller {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  contact   String
  category  String
  address   String
  imageUrl  String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Training {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  category    String
  description String
  slug        String
  content     String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Staff {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  contactno      String
  email          String   @unique
  date           DateTime
  isActive       Boolean
  image          String
  parentCategory String?
  slug           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
  SELLER
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model Product {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String       @unique
  productprice   Float
  saleprice      Float
  description    String
  isActive       Boolean
  image          String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isWholesale    Boolean
  sku            String?
  barcode        String?
  productCode    String?
  unit           String?
  wholesalePrice Float?
  wholesaleQty   Int?
  productStock   Int?
  qty            Int?
  orderItems     OrderItems[]
  sales          Sale[]
  bidders        Bidder[]
  bids           Bid[]        @relation("ProductBids")
  barters        Barter[]     @relation("ProductBarters")
  category       Category?     @relation("CategoryProducts", fields: [categoryId], references: [id])
  categoryId     String ?      @db.ObjectId
  seller         User?        @relation("UserProducts", fields: [userId], references: [id])
  userId         String?      @db.ObjectId
  serviceType    ServiceType? @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId  String?      @db.ObjectId // This field references the ServiceType model
}

model ServiceType {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  products Product[] // This establishes the relation back to Product
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  status    String   @default("pending") // Tracks bid status (pending, approved, rejected)
  bidders   Bidder[]
  product   Product  @relation("ProductBids", fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bidder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bidId     String?  @db.ObjectId // Reference to the main Bid
  userId    String?  @db.ObjectId // Reference to the User who is bidding
  productId String   @db.ObjectId // Reference to the Product being bid on
  amount    Float // Amount bid by the user
  createdAt DateTime @default(now()) // When the user made the bid
  updatedAt DateTime @updatedAt // Automatically updated on modification

  // Relations
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  bid     Bid?    @relation(fields: [bidId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Barter {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  productId      String?  @db.ObjectId
  userId         String?  @db.ObjectId
  prductExchange String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  product        Product? @relation("ProductBarters", fields: [productId], references: [id], onDelete: Cascade) // Specify relation name here
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ServiceTypeName {
  BIDDING
  BARTERING
  SELLING
}

model Order {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @db.ObjectId
  firstName     String
  lastName      String
  emailAddress  String
  phoneNumber   String
  streetAddress String
  city          String
  country       String
  district      String
  shippingCost  Float
  paymentMethod String
  orderItems    OrderItems[]
  orderStatus   OrderStatus  @default(PROCESSING)
  sales         Sale[]
  orderNumber   String?
  paymentIntentId  String?      // Add this line to store the payment intent ID
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  refunds       Refund[]     @relation("OrderRefunds")
}

enum RefundStatus {
  REQUESTED
  APPROVED
  REJECTED
  PROCESSED
}

model Refund {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String       @db.ObjectId
  orderItemId String?      @db.ObjectId
  userId      String       @db.ObjectId
  vendorId    String?      @db.ObjectId
  amount      Float
  reason      String
  status      RefundStatus @default(REQUESTED)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  order     Order       @relation("OrderRefunds", fields: [orderId], references: [id])
  orderItem OrderItems? @relation("OrderItemRefunds", fields: [orderItemId], references: [id])
  user      User        @relation("UserRefunds", fields: [userId], references: [id])
  vendor    User?       @relation("VendorRefunds", fields: [vendorId], references: [id])
}

model OrderItems {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  vendorId  String   @db.ObjectId
  quantity  Int
  image     String
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  // Define the opposite relation field for Refunds
  refunds Refund[] @relation("OrderItemRefunds")
}

model Sale {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String   @db.ObjectId
  productId    String   @db.ObjectId
  vendorId     String   @db.ObjectId
  name         String
  image        String
  qty          Int
  productprice Float
  total        Float
  date         DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
  vendor       User     @relation(fields: [vendorId], references: [id])
}
